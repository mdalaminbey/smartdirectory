<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WordPress Coding Standards" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>The Coding standard for the WordPress Coding Standards itself.</description>

	<file>.</file>

	<arg value="sp"/>
	<arg name="extensions" value="php"/>
	<arg name="basepath" value="."/>
	<arg name="parallel" value="8"/>

	<exclude-pattern>dev-*</exclude-pattern>
	<exclude-pattern>node_modules/*</exclude-pattern>
	<exclude-pattern>vendor/*</exclude-pattern>
	<rule ref="WordPress.Security"></rule>

	<rule ref="PSR2.Methods.FunctionClosingBrace"/>

	<!--
	#############################################################################
	Handbook: PHP - Formatting SQL statements.
	Ref: https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#formatting-sql-statements
	#############################################################################
	-->

	<!-- Rule: in $wpdb->prepare - %s is used for string placeholders and %d is used for integer
		 placeholders. Note that they are not 'quoted'! -->
	<rule ref="WordPress.DB.PreparedSQLPlaceholders"/>
	<rule ref="WordPress.DB.DirectDatabaseQuery" />

	<!-- Covers rule:  $wpdb->prepare()... The benefit of this is that we don't have to remember
		 to manually use esc_sql(), and also that it is easy to see at a glance whether something
		 has been escaped or not, because it happens right when the query happens. -->
	<rule ref="WordPress.DB.PreparedSQL"/>

	<!-- Covers rule: Avoid touching the database directly. -->
	<rule ref="WordPress.DB.RestrictedFunctions"/>
	<rule ref="WordPress.DB.RestrictedClasses"/>

</ruleset>